<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>All You Need to Know to Make a Very Customized Page</title>
      <link href="/2024/04/01/All-You-Need-to-Know-to-Make-a-TO-C-Page/"/>
      <url>/2024/04/01/All-You-Need-to-Know-to-Make-a-TO-C-Page/</url>
      
        <content type="html"><![CDATA[<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>i’ve been focusing on implementing a customized page for several months since i received many product requirements from the manager.<br>it was quite hard at the very first begining, cause nowadays people are more likely to use open source component library to build the website, and very few people are building website from scratch with the basis html and css. </p><p>A TO-C page is however a website page that faces the customers directly, so it’s very important to make it perfect and attracting. Normally, the open source component libraries cannot be customized for you. </p><p>in this article, i gonna summary the most useful things i have learn these days about building a Very Customized website page. so if you are a front-end engineer, and are facing the same problem in implementing attracting website page from scratch. with this article, you can at least find everything you should know to finish your job.</p><h1 id="1-What-is-a-customized-page"><a href="#1-What-is-a-customized-page" class="headerlink" title="1. What is a customized page"></a>1. What is a customized page</h1><p>a customized page is usually a page that faces the customers directly. it is widely seen in the company who make a profit by user growth and page view. for example, twitter \ facebook \ tiktok can be this kind of website, because they can put some advertisement to thier viewers. more viewers they got, more profit they earn from the advertisements.<br>this kind of attracting website page is usually hard to be built with open source component library, for example you might have heard of the ant design library \ the element ui library and so on. they contains only simple and basic ui effect which might seems less attractive.</p><h1 id="2-It’s-import-to-have-screen-size-standard"><a href="#2-It’s-import-to-have-screen-size-standard" class="headerlink" title="2. It’s import to have screen size standard"></a>2. It’s import to have screen size standard</h1><p>Modern website pages are also designed to fit different screen size.<br>open the chrome dev console and then click the small icon, you can view your page at a glance of a mobile view.<br><img src="/img/All-You-Need-to-Know-to-Make-a-TO-C-Page/icon.png" alt="Alt text"><br>open the dimension list you might find out the most common mobile devices with different pixel, and the dev console give you the opportunities to simulate how your website perform in that kind of website.<br><img src="/img/All-You-Need-to-Know-to-Make-a-TO-C-Page/common-device.png" alt="Alt text"><br>it could be hard to take every kind of device screen into consideration, thus it is important to have a standard of what size of screen size you are going to care, and what does not matter.<br>for me, i build website for both pc users and mobile users, i want my page to perform well responsively. so i usually design my page with two different screen size, 1200px width and 750px width.<br>if he&#x2F;she is a viewer from pc, then the website will show the 1200px effect to all people who use 1200px width screen and above.<br>&#x2F;&#x2F; TODO: 1200px sample<br>if he&#x2F;she is a viewer using a mobile device, then the website will show the 750px effect to all people who use 750px and below.<br>&#x2F;&#x2F; TODO: 750px sample</p><h1 id="3-Use-CSS-to-make-Responsive-web-design-RWD"><a href="#3-Use-CSS-to-make-Responsive-web-design-RWD" class="headerlink" title="3. Use CSS to make Responsive web design (RWD)"></a>3. Use CSS to make Responsive web design (RWD)</h1><p>CSS RWD is the exact technology to use.<br>you should write like below, to make the website layout responsive to the screen size</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.myClassName</span> &#123;</span><br><span class="line">    // write <span class="attribute">normal</span> layout and style here</span><br><span class="line">    // for example <span class="selector-tag">i</span> usually want <span class="selector-tag">to</span> show the <span class="attribute">content</span> in the center of the page</span><br><span class="line">    <span class="selector-class">.contianer</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto; // this make things horizentally centered</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// the following rules are only attach when the screen <span class="attribute">width</span> is <span class="number">750px</span> and below</span><br><span class="line">// usually for mobile users</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">750px</span>)&#123;</span><br><span class="line">    <span class="selector-class">.myClassName</span> &#123;</span><br><span class="line">        // this gonna rewrite the style above when screen <span class="attribute">width</span> is equal or below <span class="number">750px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-Some-Basic-CSS-Rules-to-Make-Your-Page-Elegant"><a href="#4-Some-Basic-CSS-Rules-to-Make-Your-Page-Elegant" class="headerlink" title="4. Some Basic CSS Rules to Make Your Page Elegant"></a>4. Some Basic CSS Rules to Make Your Page Elegant</h1><p>CSS could cascade. one certain effect can be impletement in serval ways of writing which might be confusing for new beginners.<br>lets talk about the basic and most commonly used ways to express your page clear and elegant. </p><h2 id="box-model"><a href="#box-model" class="headerlink" title="box model"></a>box model</h2><p>you could never run away from box model if you’re using CSS</p><h2 id="flex-box-layout"><a href="#flex-box-layout" class="headerlink" title="flex box layout"></a>flex box layout</h2><h2 id="border-border-raduis"><a href="#border-border-raduis" class="headerlink" title="border \ border-raduis"></a>border \ border-raduis</h2><h2 id="text"><a href="#text" class="headerlink" title="text"></a>text</h2><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><h2 id="different-kinds-of-CSS-selector-and-their-priority"><a href="#different-kinds-of-CSS-selector-and-their-priority" class="headerlink" title="different kinds of CSS selector and their priority"></a>different kinds of CSS selector and their priority</h2><h2 id="take-care-of-your-mouse-effect"><a href="#take-care-of-your-mouse-effect" class="headerlink" title="take care of your mouse effect"></a>take care of your mouse effect</h2><h1 id="5-Make-it-perfecter-with-px-and-rem"><a href="#5-Make-it-perfecter-with-px-and-rem" class="headerlink" title="5. Make it perfecter with px and rem"></a>5. Make it perfecter with px and rem</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多卡顿堆栈的实时方法聚类</title>
      <link href="/2023/06/07/%E5%A4%9A%E5%8D%A1%E9%A1%BF%E5%A0%86%E6%A0%88%E7%9A%84%E5%AE%9E%E6%97%B6%E6%96%B9%E6%B3%95%E8%81%9A%E7%B1%BB/"/>
      <url>/2023/06/07/%E5%A4%9A%E5%8D%A1%E9%A1%BF%E5%A0%86%E6%A0%88%E7%9A%84%E5%AE%9E%E6%97%B6%E6%96%B9%E6%B3%95%E8%81%9A%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>近期，接到团队内的一个需求，内容是做一个方法调用树的功能优化一下当前的移动端卡顿监控的堆栈聚类。什么是方法调用树？卡顿监控又是怎么一回事？什么是堆栈聚类？他们都是为了解决什么问题呢？</p><p>作为性能监控团队的一员，怎么能不了解性能。于是决定一探究竟，先解决刚刚说的每一个问题，再想办法把方法调用树功能呈现出来。</p><h3 id="什么会导致App卡顿？"><a href="#什么会导致App卡顿？" class="headerlink" title="什么会导致App卡顿？"></a>什么会导致App卡顿？</h3><p>马斯克在Twitter的裁员新闻闹的沸沸扬扬，而最近的剧情发展正好扯上了Android卡顿问题，这吸引了我的注意。</p><p>马斯克在Twitter上公开发布了一条致歉内容：</p><p>“有些国家&#x2F;地区在用Twitter的时候会比较卡顿，他要为此道歉。”</p><p>并且他认为性能不佳的原因是，推特仅仅为了渲染界面上一个叫home timeline的功能，就执行了1000多个RPC。<br><img src="/img/%E5%A4%9A%E5%8D%A1%E9%A1%BF%E5%A0%86%E6%A0%88%E7%9A%84%E5%AE%9E%E6%97%B6%E6%96%B9%E6%B3%95%E8%81%9A%E7%B1%BB/twitter.png" alt="twitter.png"><br>这时，推特的工程师Eric站了出来，他说自己在推特Android工作了6年时间，并且指出马老板的说法是错误的。</p><p>在Eric看来，造成推特的卡顿原因有三：</p><ul><li>推特的功能设计过于“臃肿”，有许多很少用到的功能</li><li>累计多年的技术债，牺牲了性能</li><li>花费大量的时间等待网络响应<br><img src="/img/%E5%A4%9A%E5%8D%A1%E9%A1%BF%E5%A0%86%E6%A0%88%E7%9A%84%E5%AE%9E%E6%97%B6%E6%96%B9%E6%B3%95%E8%81%9A%E7%B1%BB/eric.png" alt="eric.png"><br>那么造成推特“有些国家卡”的原因到底是什么呢？我们收到用户反馈的卡：“有些国家卡”，“感觉卡”，“偶尔会卡”，该怎么解决？</li></ul><p>结合上面这些例子的灵感，查了查资料，简单来说就是，<strong>当用户感受到卡，实际可能是程序加载、渲染的过程遇到了阻塞，或者说耗时高了，而这个阻塞影响了界面的可交互性、ui的流畅度。</strong></p><p>这样看来，<strong>想要找卡顿的原因，就转化成了找程序加载、渲染过程中可能受阻的原因</strong>，我们好好想想程序加载时可能会遇到什么问题：</p><ol><li><strong>锁问题：死锁、抢锁都有可能导致主线程卡住。</strong></li></ol><ul><li>死锁就是，两个线程都需要对方的锁才肯释放自己占着的锁，造成互相等待。</li><li>抢锁就是，当线程想要执行某些操作时，发现锁被另一个线程占着，所以就需要等待锁被释放了，才能执行下去。</li></ul><ol><li><strong>各种IO问题：网络IO、磁盘IO、内存IO、..</strong></li></ol><ul><li>网络IO无需多说，对移动端来说，多数采用http或者websocket协议，他们都基于tcp，链路长。要是程序用同步的方式请求网络资源，总是拿到响应后才继续执行代码下文，也会造成主线程等待。</li><li>磁盘IO，这和磁盘的本身硬件就有一定关系。传统的读写磁盘的时候需要寻道、旋转、传输等，都是费时操作。减少磁盘IO次数也是一个公认的数据库优化的着手点。</li><li>内存IO，虽然比起网络和磁盘来说，内存听起来要快很多。但其实内存也存在和磁盘一样，存在随机io比顺序io要慢的问题。当对性能有极致追求的时候，或许就该看一看从内存下手的优化点了。</li></ul><ol><li><strong>程序本身慢：</strong></li></ol><ul><li>程序员写的代码需要大量计算，比如遍历时造成infinite loop、使用了低性能的算法，导致程序卡在某个函数执行了很久。</li><li>大量的ui、复杂的ui，导致cpu计算了很久才往gpu传<br>这样一总结，卡顿看起来就没那么高深了，一旦我们知道卡顿的原因属于上面的哪一种，问题就很好解决了。</li></ul><p>那要怎么找到问题出在哪呢？如果是研发流程内的，能够靠研发和测试就发现的问题还好说。那如果是生产环境上，一些用户的手机上才有的问题，依赖某些运行环境、运行时数据才有的问题，脱离了生产环境可能会很难复现。</p><h3 id="用卡顿堆栈来定位卡顿问题"><a href="#用卡顿堆栈来定位卡顿问题" class="headerlink" title="用卡顿堆栈来定位卡顿问题"></a>用卡顿堆栈来定位卡顿问题</h3><p>如果每次终端发生卡顿的时候，我们都将当下主线程堆栈捕捉，上报收集。那么不就可以知道主线程在执行哪个函数的时候卡住、卡在系统函数还是业务函数、卡的时候执行了什么操作？</p><p>这里的原理非常简单，并且QAPM监控平台确实这么做了。那为什么还需要堆栈聚类？什么是聚类呢？让我们继续探索下去。</p><h3 id="当我们谈论聚类分析，是为了解决什么问题？"><a href="#当我们谈论聚类分析，是为了解决什么问题？" class="headerlink" title="当我们谈论聚类分析，是为了解决什么问题？"></a>当我们谈论聚类分析，是为了解决什么问题？</h3><p><strong>聚类是将类似的对象分组为不同集合（类别）的过程。聚类与分类的不同在于，聚类要求划分的类是未知的。</strong></p><p>听起来有些抽象，这里我想尝试用跨界的思维来理解一下，或许就能触类旁通呢？在其他领域，有不少聚类应用的例子。</p><p>比如零售公司会使用聚类的手段，将相似的顾客归为一组，最终实现更好的销售商品的目的。</p><p>举个例子，零售公司会先收集一些顾客信息：</p><ol><li>家庭收入</li><li>家庭规模</li><li>户主职业</li><li>与最近的市区距离</li></ol><p>基于以上这些信息，再经过聚类分析算法的处理，顾客被归为以下类</p><ol><li>cluster 1：小家庭，低消费</li><li>cluster 2 ：小家庭，高消费</li><li>cluster 3 ：大家庭，低消费</li><li>cluster 4 ：大家庭，高消费</li></ol><p>然后零售公司就可以分析出每种cluster的顾客会对什么样的广告产生兴趣，然后定向给同cluster的顾客推送个性化的广告页。</p><p>体育科学中也经常使用聚类的方式，以此来提高队员的体育表现成绩。</p><p>举个例子，球队的数据分析师，至少会统计球员的以下这些信息：</p><ol><li>场平均得分（PPG）</li><li>场平均篮板（RPG）</li><li>场平均助攻（APG）</li><li>场平均抢断（SPG）</li></ol><p>然后通过某种聚类算法，将有类似强项和弱项的球员归为一组，进行某种有针对性的训练。</p><p>从这些例子可以看出，聚类分析的前提首先是对信息的收集，然后是用聚类算法来给信息归类，最后我们就能针对不同类进行不同的处理，最终达到目的。</p><h3 id="卡顿堆栈聚类"><a href="#卡顿堆栈聚类" class="headerlink" title="卡顿堆栈聚类"></a>卡顿堆栈聚类</h3><p>我们回过头来再仔细想想，如果仅仅只有卡顿堆栈信息，没有堆栈的聚类，能解决问题吗？首先，QAPM监控的是生产环境，既然是生产环境，那就可能有大量用户数据，也就会有大量堆栈数据上报。该怎么知道从哪个堆栈下手、从哪里分析问题？</p><p>对大量未聚合数据进行分析，容易有这些难点：</p><ol><li>找共性难：如何从成千上万的卡顿堆栈中找出的几个根本原因</li><li>分析难：哪些堆栈信息是有用的，如何分析</li></ol><p>堆栈聚类首先能解决的是找共性问题，有相似特征（feature）的堆栈被归结为一类卡顿问题，能够直接根据聚类后的关键耗时函数直接进行问题定位。</p><p>其次，堆栈聚类能够解决的是看哪些堆栈是有用的问题，聚类后触发次数较多的卡顿问题被放在首页，而那些聚类后次数少的问题则在后边，开发人员重点关注发生次数多的卡顿问题即可。</p><p>卡顿堆栈聚类，是将收集的终端卡顿时的堆栈，抽取关键应用层堆栈函数进行聚合，最终将终端的卡顿归结为不同类的卡顿问题。这些卡顿问题能够展示这些函数的触发次数和耗时情况，以帮助项目发现重点问题。不仅卡顿堆栈能用聚类分析、崩溃堆栈也能用聚类分析、网络性能也能根据url进行聚类分析，QAPM上许许多多的性能监控问题也都用了聚类分析的思想。</p><h3 id="卡顿堆栈聚类规则"><a href="#卡顿堆栈聚类规则" class="headerlink" title="卡顿堆栈聚类规则"></a>卡顿堆栈聚类规则</h3><p>说了半天堆栈聚类，那到底是按什么规则聚类的？聚出来的类别一定是同类问题，一定是能够解决问题的吗？</p><p>目前的QAPM卡顿堆栈聚类，聚合的粒度是3行函数，换句话说，也就是把每类卡顿问题的根本原因归结为3个高耗时函数。</p><p>说到这里大家肯定会疑惑：</p><ol><li>这3个高耗时函数是怎么得到的？</li><li>为什么是3行的聚合粒度？为什么不是2行、4行…？</li><li>导致卡顿的耗时函数真的是这三个吗？</li></ol><p>我们先来解答第一个问题，每类卡顿问题的耗时函数都是由后台分析得到的。大致可以归为这几种分析情况：</p><p>第一种是统计靠近栈顶的连续高耗时业务函数，先验的经验告诉我们，越是靠近栈顶的业务函数越有可能是导致终端卡顿的直接原因；</p><p>第二种是没有靠近栈顶的连续高耗时函数，那么就看是否有连续高耗时的父方法，统计这些父方法；</p><p>第三种是将一条上报的所有时间片打散平铺开来，统计各函数出现的频次和对应时间片的耗时算出当前函数的总耗时，然后选总耗时高的函数作为当前这个样本的特征，有一样特征的堆栈样本被看作是同类的卡顿问题；还有就是将相似的堆栈样本进行聚类，如何定义相似，用的是ReBucket算法，等等。</p><p>接着我们来解答聚合粒度的问题。其实聚类的粒度控制在3行，更多的是一个经验之举。如果聚合粒度更细，可能会导致聚出来的问题（同上文的cluster，后面不再解释）太多了，聚的太散；反之，如果聚合粒度更粗，又可能导致问题过少，找到的耗时函数不够准确。</p><p>当然，并不是要说选择3行的聚合粒度一定是对的，理想中，如果能够实现多级聚类是最灵活的，能够根据项目特点来自由的选择聚类的函数行数，当然这对于开发人员来说，使用难度也会更高。</p><p>最后一个问题，QAPM平台上聚类分析所得到的耗时函数就一定是精准的吗？答案是不一定，这里的原因有很多种可能。</p><p>让我们沿着上报数据传输的每一个环节来看。当堆栈样本上报的时候，由于我们对堆栈的抓取是依照一定的频率&#x2F;时间片来抓取的，有可能抓取的时候，卡顿已经结束，也就是抓到的堆栈已经偏移了。</p><p>其次，数据上报后经过后台分析，后台分析的算法不够准确、又或是3行的聚合粒度不适合项目，这也可能导致最终分析得到的耗时函数不够精准的问题。</p><p>这里，我的用词一直是“精准”而不是“准确”，想说明的是，当数据量很大的时候，由于堆栈偏移以及分析算法的误差是在我们的容错范围内的；并且数据量越大，聚类后的问题越接近我们的真实结果。</p><h3 id="用火焰图、Call-Tree和Bottom-up来补偿卡顿堆栈聚类"><a href="#用火焰图、Call-Tree和Bottom-up来补偿卡顿堆栈聚类" class="headerlink" title="用火焰图、Call Tree和Bottom up来补偿卡顿堆栈聚类"></a>用火焰图、Call Tree和Bottom up来补偿卡顿堆栈聚类</h3><p>现在我们已经搞清楚这个需求的所有背景知识了，那么接下来就是进入正题，该怎么做方法调用树的需求呢？</p><p>Chrome用performance面板来承载页面加载过程的性能数据，并用了三种类型的图表来诠释函数方法的性能。其中，火焰图用来展示所有方法调用关系和耗时、Call Tree用来展示函数自顶向下的调用关系（父函数调用子函数）、Bottom up用来展示自底向上的被调用关系（子函数被父函数调用）。我们吸收并借鉴Chrome的做法（其实这也是性能数据展示的通用做法），也用这三个图表来完成我们的需求。</p><p>这三种图表可以视为聚类的补偿功能，能够进一步改善上文提到的耗时函数定位是否准确的问题，具体表现有以下这几种场景：</p><ol><li>通过火焰图将所有的堆栈数据整合成一棵树，从这颗树一眼看见耗时最长的函数，平台的分析结论</li><li>在固定3行聚合粒度的情况下，真正的耗时函数有没有可能是需要第4行、5行、…？通过Call Tree，顺着调用链的追踪，我们能够发现真正的耗时函数可能在非常深的地方。</li><li>Bottom up中发现了高频次、高耗时的函数？优化一处，作用在整个App上</li></ol><h3 id="关键技术方案"><a href="#关键技术方案" class="headerlink" title="关键技术方案"></a>关键技术方案</h3><p>在QAPM平台，目前现有的方法聚类方案是基于大数据离线计算实现的。当前数据存储方案是clickhouse。</p><p>clickhouse一直传闻性能好，机器学习利器，或许我们可以尝试畅想一下，是否能用clickhouse做到大数据量级的实时计算？</p><p>原始数据是平铺的堆栈数据，用JSON格式的字符串存储。从数据库查出的数据，需要能够区分出函数调用的父子关系，需要能够统计出函数出现的次数。然后前端再根据这样的信息，将数据重整成视图组件可解析的树形结构的数据。<strong>让我们先想清楚这里每一个步骤的目标要输出什么。</strong></p><p>原始数据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[&quot;frame1&quot;, &quot;frame2&quot;, &quot;frame3&quot;,....],[&quot;frame1&quot;, &quot;frame2&quot;, &quot;frame3&quot;,....], ...]</span><br></pre></td></tr></table></figure><p>数据库要查出能标识父子关系的信息：</p><table><thead><tr><th>parent</th><th>frame</th><th>cnt</th></tr></thead><tbody><tr><td>frame1</td><td>frame2</td><td>2</td></tr><tr><td>frame2</td><td>frame3</td><td>2</td></tr><tr><td>……</td><td>……</td><td>……</td></tr></tbody></table><p>前端要将数据转化成树形嵌套结构：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    frame <span class="punctuation">:</span> frame1<span class="punctuation">,</span></span><br><span class="line">    cnt <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    children <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        frame <span class="punctuation">:</span> frame2<span class="punctuation">,</span></span><br><span class="line">        cnt <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        children <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            frame <span class="punctuation">:</span> frame3<span class="punctuation">,</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中，数据库查询这一步是最难的，这一步没有技巧，只能通过费曼算法来解决问题。我们首先将字符串格式的堆栈数据转化成堆栈数组，clickhouse的array族函数能力特别强，之后的问题就是处理数组。</p><p>首先使用arrayJoin将堆栈数组从二维拍平成一维。</p><p>然后将堆栈数组复制成2份，一份parent_stack代表父节点、一份stack代表当前节点。</p><p>然后，细细观察，就可以发现，堆栈数据的父子函数总是挨着的。借鉴一下平时处理链表的思维，总是需要加上头节点。同理在堆栈数组中，我们利用clickhouse的arrayPushFront方法给parent_stack添加上虚拟头节点，然后通过arrayPopBack来使数组长度不变，构造出2个错层堆栈。</p><p>利用arrayMap将数组中的元素一一对应起来，最后再一次用arrayjoin拍平数组，最终实现父子函数一一对应。</p><p>就像下面这个过程：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// step 1 : 利用arrayjoin，将二维数组转化成一维</span></span><br><span class="line">stack <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;frame1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame3&quot;</span><span class="punctuation">,</span>...<span class="punctuation">,</span> <span class="string">&quot;frame n&quot;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// step 2 : 将堆栈数组复制成两份，</span></span><br><span class="line">stack <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;frame1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame3&quot;</span><span class="punctuation">,</span>...<span class="punctuation">,</span> <span class="string">&quot;frame n&quot;</span><span class="punctuation">]</span></span><br><span class="line">parent_stack <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;frame1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame3&quot;</span><span class="punctuation">,</span>...<span class="punctuation">,</span> <span class="string">&quot;frame n&quot;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// step 3 : 给parent_stack添加头节点制造出错层堆栈，维持数组长度不变</span></span><br><span class="line">stack <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;frame1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame3&quot;</span><span class="punctuation">,</span>...<span class="punctuation">,</span> <span class="string">&quot;frame n&quot;</span><span class="punctuation">]</span></span><br><span class="line">parent_stack <span class="punctuation">:</span>  <span class="punctuation">[</span><span class="string">&quot;HEAD&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame3&quot;</span><span class="punctuation">,</span>...<span class="punctuation">,</span> <span class="string">&quot;frame n-1&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// step 4 : 利用用arrayMap构造元Tuple将父子节点绑定起来</span></span><br><span class="line"><span class="comment">// arrayMap((x,y)-&gt;(x,y), stack, parent_stack)</span></span><br><span class="line">stack_pair <span class="punctuation">:</span> <span class="punctuation">[</span>(<span class="string">&quot;HEAD&quot;</span><span class="punctuation">,</span><span class="string">&quot;frame1&quot;</span>)<span class="punctuation">,</span>(<span class="string">&quot;frame1&quot;</span><span class="punctuation">,</span><span class="string">&quot;frame2&quot;</span>)<span class="punctuation">,</span>...<span class="punctuation">,</span>(<span class="string">&quot;frame n-1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;frame n&quot;</span>)<span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// step 5 : 利用arrayjoin拍平stack_pair即可</span></span><br></pre></td></tr></table></figure><p>在真实需求场景中，我们不仅需要找到当前函数的父函数，同时还需要找到当前函数的子函数，从而实现Bottom up需求中自底向上的对应关系查找方式。用到的方法其实和上面类似：添加虚拟尾节点，制造出错层堆栈[“frame2”, “frame3”,…, “frame n”, “TAIL”]，再用元祖将他们绑定对应即可。</p><p>我们可能还需要得到当前函数在堆栈中的栈深，统计函数出现的次数，等等。这些在clickhouse都能够用sql实现。</p><!-- sql实验过程：https://docs.qq.com/doc/DYk1yckFxUm9aVnVz?&u=7a6bdf68e8f1493184334941ac685915 --><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>在生产环境的真实查询场景中，我们常常需要面对十万级以上的数据行数查询。在性能优化阶段，我们用这样的思路来解决问题：</p><p>最耗性能的操作是哪些步骤？有替代方案吗？实验这些方案、度量、拍方案。</p><p>其中，我们sql用到的字符串的json解析方法，比如JSON_QUERY函数、JSONExtract函数耗费性能，这在clickhouse的官方文档中已经指出；此外，两次arrayJoin操作也不太恰当，在数组拍平的过程中，会占用大量数据库内存，数据行数变成了n的平方。在大数据量级面前，不仅会有慢查询问题，甚至可能导致数据库内存超限。</p><p>那么字符串的json解析和arrayJoin的步骤能够省略吗？</p><p>json解析的步骤可以省略，因为堆栈数据格式是由后台生成的。如果后台一开始就生成数组形式的堆栈格式，那么这里就不需要从字符串中解析出数组了。但原本的字符串json结构也要保留，因为QAPM其他功能用到了这样的格式，总不可能为了这个需求就重构之前的所有需求吧。</p><p>堆栈数据一式两份，这里会有存储成本的增加。但是考虑到，后台是数据入库前的最后一步，也需要配合当前需求，用正则匹配的方式去除函数的行号信息，偏移地址信息等，这样从clickhouse查询时，才能将同类的函数更好的group by在一起。因此存成两份堆栈数据，似乎是比较合理且不可避免的。</p><p>arrayJoin的步骤不能省略，但可以精简。因为每条上报数据注定是一系列的时间片的堆栈数据，那么至少就是一个二维数组的结构，从二维数据的结构得到最里面的元素，可以将二维数组拍平两次，那就要使用两次arrayJoin。</p><p>还有一个办法是将数组拍平一次，然后使用数组下标的方式来访问最内层元素。同时我们可以用更高性能的方式来使用arrayJoin：创建一个物化视图表，将arrayjoin的操作提前在物化视图中完成。</p><p>说了这么多，忘记说性能优化的效果，我们利用benchmark来测试不同查询方案的耗时，在十万级以上的数据查询，经过性能优化操作后，最终比最初的单条sql查询快了一个数量级（提升了90%）。</p><!-- 一些性能优化测试数据：        https://docs.qq.com/doc/DYmFYRVNMdEh4U1FY?&u=7a6bdf68e8f1493184334941ac685915 --><h3 id="总结和未来规划"><a href="#总结和未来规划" class="headerlink" title="总结和未来规划"></a>总结和未来规划</h3><p>当前的能够完成任意粒度的堆栈内方法聚类。在产品化方面，前端展现形态上，目前是呈现的是Call Tree和Bottom up的形式，火焰图的可视化正在开发中。</p><p>再抒发一点个人感想，本次的需求任务：无论是App卡顿原理、卡顿堆栈的解读、clickhouse语句、还是从全链路的视角去思考性能优化。这些对于我来说都是对未知领域的探索，过程中也投入了很多试错成本。</p><p>在跨越本身前端身位去做跨界工作的时候，深深体会到做一件事情，需要沉下心，哪怕是从0开始，也该了解清楚事情的前因后果，来龙去脉，这样才会有更好的全局思维去思考问题。</p><p>同时在面前有很多困难和未知时，尝试寻找突破点、抓住问题的重点很重要，比如这里的突破点就是写出复杂的查询sql，随后才是做性能优化、实现界面可视化等等。倘若一开始不想着循循渐进，不在一步步的尝试中攻克每一个问题，恐怕是没办法空想出高性能的全链路方案的。</p><!-- 欢迎体验新功能，文章有说的不对的地方，欢迎指正。 --><!-- ### 相关参考资料： --><!-- 性能之巅：定位和优化程序CPU、内存、IO瓶颈：https://bbs.huaweicloud.com/blogs/222032 --><!-- 实际测试内存在顺序IO和随机IO时的访问延时差异：https://zhuanlan.zhihu.com/p/87827480 --><!-- 5 Examples of Cluster Analysis in Real Life：https://www.statology.org/cluster-analysis-real-life-examples/ --><!-- 如何排查android卡顿原因？：https://mk.woa.com/q/255791 --><!-- QAPM卡顿聚类，重新定义App卡顿：https://km.woa.com/group/571/articles/show/316875?ts=1551771520 --><!-- 【万字长文】 Clickhouse查询优化：https://km.woa.com/group/571/articles/show/527756 --><!-- ReBucket算法总结：https://cloud.tencent.com/developer/article/2077081 --><!-- 堆栈合并规则：https://km.woa.com/group/15785/docs/show/144228 --><!-- 腾讯文档初稿https://docs.qq.com/doc/DYlFZWE9XYm5OQkNs?_t=1705464755823&u=7c4071057a8846c89573e95dba28ec96 -->]]></content>
      
      
      <categories>
          
          <category> tech blog </category>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clickhouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACL访问控制列表实践</title>
      <link href="/2023/05/30/ACL%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8%E5%AE%9E%E8%B7%B5/"/>
      <url>/2023/05/30/ACL%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在后台管理系统中，权限管理是非常常见的需求了。</p><p>最近在一套由django搭建的法律案件相关后台管理系统中，就有一个和权限管理相关的需求：</p><p>这个系统可以方便律所跟踪该律所接手的所有案件的状态，相关的文书附件信息等等。对传统律所的数字化、流程化，有非常重要的意义。</p><p>在这套系统中，大致可分为：管理员、工作中心，内部用户、普通用户、法律机构等等角色</p><p>每种角色的权限大小不同，比如说管理员可以查看所有的用户，但是不能修改用户的信息；还有个角色是普通用户，他只能查看自己的信息，不能查看其他用户的信息。</p><p>系统中会录入各种法律案件，一桩案件在系统上的生命周期包括：已上传、待分配、调解中、执行调解结果、退回、完成等等。</p><p>不同角色在案件的不同阶段，可以执行的操作也不同。</p><p>比如说，管理员可以在案件的任何阶段都可以查看案件的信息，但内部员工只能在分配给自己后，才能查看案件信息。</p><p>比如说，管理员在任何时候都没有办法亲自调解案件，而内部员工在案件调解中的时候，可以执行调解操作。</p><p>这种需求在后台管理系统中应该是非常常见的了，但是我在网上找了一圈，没有找到合适的解决方案，所以就自己动手写了一个。采用的访问控制列表（ACL）来实现，这里记录下在实践中的一些经验。</p><h2 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h2><h3 id="1-ACL"><a href="#1-ACL" class="headerlink" title="1. ACL"></a>1. ACL</h3><p>ACL，即访问控制列表，是一种权限控制的方式，可以用来控制用户对资源的访问。</p><p>ACL的基本思想是，为每个资源分配一个访问控制列表，这个列表中包含了可以访问该资源的用户列表，当用户访问该资源时，系统会检查该用户是否在访问控制列表中，如果在，则允许访问，否则拒绝访问。</p><p>ACL的优点在于，可以灵活的控制用户对资源的访问，而且可以动态的修改访问控制列表，而不需要重新编译程序。</p><p>ACL的缺点在于，当用户数量很多时，访问控制列表会很大，这样会占用大量的内存。</p><h3 id="2-ACL的使用"><a href="#2-ACL的使用" class="headerlink" title="2. ACL的使用"></a>2. ACL的使用</h3><p>ACL的使用非常简单，只需要在需要使用的地方使用<code>var()</code>函数即可，比如说：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-ACL的优势"><a href="#3-ACL的优势" class="headerlink" title="3. ACL的优势"></a>3. ACL的优势</h3>]]></content>
      
      
      <categories>
          
          <category> tech blog </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> system design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>urllib3 Drop support for OpenSSL&lt;1.1.1 排障记录</title>
      <link href="/2023/05/30/urllib3-Drop-support-for-OpenSSL-1-1-1%E6%8E%92%E9%9A%9C%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/05/30/urllib3-Drop-support-for-OpenSSL-1-1-1%E6%8E%92%E9%9A%9C%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>urllib3 是一个 Python 的 HTTP 请求库，它提供了一种简单而强大的方式来发送 HTTP&#x2F;1.1 请求，包括 GET、POST、PUT、DELETE 等方法。它还提供了连接池管理、重试、重定向、代理等功能，使得开发者能够更加灵活地控制 HTTP 请求。urllib3 还支持 SSL&#x2F;TLS 安全传输协议，可以帮助开发者安全地进行网络通信。</p><p>在python django开发的web后台项目中，因为选用了腾讯云上的一些服务，如发送短信服务、cos服务等，所以用到两个了相关插件，分别是tencentcloud_sdk_python、cos_python_sdk_v5，<br>而他们底层都用到了urllib3的库来管理请求。</p><p>这个小小的报错信息看起来只需要升级某个模块就能解决，但在实际的处理过程中，却暗藏玄机，最后花了我不少时间才弄明白，这篇文章记录一下整个排障过程。</p><h3 id="问题现场版本情况"><a href="#问题现场版本情况" class="headerlink" title="问题现场版本情况"></a>问题现场版本情况</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cos_python_sdk_v5: 1.9.23</span><br><span class="line">djangorestframework: 3.14.0</span><br><span class="line">urllib3: 2.0.0</span><br><span class="line">django: 4.2</span><br><span class="line">python: 3.9</span><br></pre></td></tr></table></figure><h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File &quot;/Users/choi/project/wusutong/backend/src/urls.py&quot;, line 20, in &lt;module&gt;</span><br><span class="line">    from utils.tencent_cos import upload_file</span><br><span class="line">  File &quot;/Users/choi/project/wusutong/backend/utils/tencent_cos.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    from qcloud_cos import CosConfig</span><br><span class="line">  File &quot;/Users/choi/.local/share/virtualenvs/backend-IV37vFGU/lib/python3.9/site-packages/qcloud_cos/__init__.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    from .cos_client import CosS3Client</span><br><span class="line">  File &quot;/Users/choi/.local/share/virtualenvs/backend-IV37vFGU/lib/python3.9/site-packages/qcloud_cos/cos_client.py&quot;, line 3, in &lt;module&gt;</span><br><span class="line">    import requests</span><br><span class="line">  File &quot;/Users/choi/.local/share/virtualenvs/backend-IV37vFGU/lib/python3.9/site-packages/requests/__init__.py&quot;, line 43, in &lt;module&gt;</span><br><span class="line">    import urllib3</span><br><span class="line">  File &quot;/Users/choi/.local/share/virtualenvs/backend-IV37vFGU/lib/python3.9/site-packages/urllib3/__init__.py&quot;, line 38, in &lt;module&gt;</span><br><span class="line">    raise ImportError(</span><br><span class="line">ImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the &#x27;ssl&#x27; module is compiled with LibreSSL 2.8.3. See: https://github.com/urllib3/urllib3/issues/2168)</span><br></pre></td></tr></table></figure><h3 id="排障记录"><a href="#排障记录" class="headerlink" title="排障记录"></a>排障记录</h3><h4 id="查看报错原因"><a href="#查看报错原因" class="headerlink" title="查看报错原因"></a>查看报错原因</h4><p>根据错误信息的提示，先来到对应的issue看下问题情况<br><img src="/img/urllib3-Drop-support-for-OpenSSL-1-1-1%E6%8E%92%E9%9A%9C%E8%AE%B0%E5%BD%95/urllib3_issues_2168.jpg"><br><a href="https://github.com/urllib3/urllib3/issues/2168">https://github.com/urllib3/urllib3/issues/2168</a><br>简单来说就是urllib3这个包现在不支持老版本的OpenSSL协议了，如果要使用，需要将系统的协议升级一下</p><h4 id="尝试升级本机OpenSSL版本"><a href="#尝试升级本机OpenSSL版本" class="headerlink" title="尝试升级本机OpenSSL版本"></a>尝试升级本机OpenSSL版本</h4><p>说干就干，先来升级本机的OpenSSL版本，这里我用的是macOS系统，所以用brew来升级</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew upgrade openssl</span><br></pre></td></tr></table></figure><p>openssl version</p><h4 id="再次查看issue信息，发布日志等"><a href="#再次查看issue信息，发布日志等" class="headerlink" title="再次查看issue信息，发布日志等"></a>再次查看issue信息，发布日志等</h4><p><img src="/img/urllib3-Drop-support-for-OpenSSL-1-1-1%E6%8E%92%E9%9A%9C%E8%AE%B0%E5%BD%95/urllib3_release_note.jpg"></p><h4 id="断点调试项目后，尝试更新python语言内置的SSL模块"><a href="#断点调试项目后，尝试更新python语言内置的SSL模块" class="headerlink" title="断点调试项目后，尝试更新python语言内置的SSL模块"></a>断点调试项目后，尝试更新python语言内置的SSL模块</h4><h4 id="尝试重新安装新版本的python"><a href="#尝试重新安装新版本的python" class="headerlink" title="尝试重新安装新版本的python"></a>尝试重新安装新版本的python</h4><h4 id="打印python的SSL版本信息"><a href="#打印python的SSL版本信息" class="headerlink" title="打印python的SSL版本信息"></a>打印python的SSL版本信息</h4><h4 id="检查SSL模块的文件"><a href="#检查SSL模块的文件" class="headerlink" title="检查SSL模块的文件"></a>检查SSL模块的文件</h4><h4 id="忽略了python虚拟环境的中使用的python和本机是隔离的"><a href="#忽略了python虚拟环境的中使用的python和本机是隔离的" class="headerlink" title="忽略了python虚拟环境的中使用的python和本机是隔离的"></a>忽略了python虚拟环境的中使用的python和本机是隔离的</h4><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>降级当前的urllib3包版本到，可以支持LibreSSL等</li></ul><h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><h4 id="SSL协议"><a href="#SSL协议" class="headerlink" title="SSL协议"></a>SSL协议</h4><h4 id="python虚拟环境"><a href="#python虚拟环境" class="headerlink" title="python虚拟环境"></a>python虚拟环境</h4><h4 id="编译python语言"><a href="#编译python语言" class="headerlink" title="编译python语言"></a>编译python语言</h4>]]></content>
      
      
      <categories>
          
          <category> tech blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>样式冲突太多，记一次前端CSS升级</title>
      <link href="/2023/05/22/%E6%A0%B7%E5%BC%8F%E5%86%B2%E7%AA%81%E5%A4%AA%E5%A4%9A%EF%BC%8C%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%89%8D%E7%AB%AFCSS%E5%8D%87%E7%BA%A7/"/>
      <url>/2023/05/22/%E6%A0%B7%E5%BC%8F%E5%86%B2%E7%AA%81%E5%A4%AA%E5%A4%9A%EF%BC%8C%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%89%8D%E7%AB%AFCSS%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目前QAPM平台前端使用的是原生CSS+BEM命名，在多人协作的模式下，容易出现<strong>样式冲突</strong>。为了减少这一类的问题，提升研效，我调研了业界上主流的7种CSS解决方案，并将最终升级方案落地到了工程中。</p><h3 id="样式冲突的原因"><a href="#样式冲突的原因" class="headerlink" title="样式冲突的原因"></a>样式冲突的原因</h3><p>目前遇到的样式冲突的原因：</p><ol><li>多人协作，样式互相污染，这是项目中的主要问题。用开发规范来限定、用CR流程来保障，并不可靠</li><li>引用大量第三方组件库，组件库对CSS的使用不规范。比如bee.css中使用了大量<code>！important</code>，破坏了项目中的样式优先级；rsuit是前端非常强大的表格组件库，他的css文件中也有直接覆盖底层样式的写法<code>label&#123; marign:2px &#125;</code></li><li>直接使用组件库引入的css文件，比如<code>import material-icons.css</code>，如果引用顺序靠后，这些文件可能会覆盖开发人员手写的样式。</li><li>…</li></ol><h3 id="调研方案"><a href="#调研方案" class="headerlink" title="调研方案"></a>调研方案</h3><p>CSS作为前端三剑客之一，几乎是所有前端同学最先学习的样式表语言。在生产环境的项目工程中，很少见到直接原生使用CSS的。但目前业界还没有通用的CSS工程化方案。这篇文章先简单介绍下7种在React&#x2F;Next.js中较为流行使用CSS的方式，并说说他们的优缺点。</p><h4 id="原生-CSS"><a href="#原生-CSS" class="headerlink" title="原生 CSS"></a>原生 CSS</h4><p>这是一种用选择器来划分css作用域的方式。</p><ul><li>缺点：</li></ul><ol><li>作用域问题<br>CSS样式之间会层叠覆盖，需要用大量的classname来指定选择器，来限定CSS的作用域范围。频繁的命名给开发人员增加不少心智负担，而且容易搞错搞重复。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// pure css example</span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line"><span class="comment">/* styles */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card__header</span> &#123;</span><br><span class="line"><span class="comment">/* styles */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card--focus</span> &#123;</span><br><span class="line"><span class="comment">/* styles */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>采用BEM规则来进行命名或许会简单些。<br>但在需要维护特别多样式的时候，BEM还是不够用。尤其是当代码中开始大量出现<code>!important</code>这种破坏优先级的东西的时候。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// css with !important</span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: blue <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打包体积大<br>使用大量冗长的原生CSS，可能会导致<br>打出来的包变大。包越大，项目自然跑的就越慢。</li></ol><h4 id="CSS-MODULES"><a href="#CSS-MODULES" class="headerlink" title="CSS MODULES"></a>CSS MODULES</h4><p>这是一种在原生CSS的基础上，通过modules（也可以理解为文件）来划分CSS的作用域。</p><p>首先先建一些以.module.css结尾的文件，这些文件里的样式可以只针对某个组件（某个module）生效。这种做法在Next.js尤为常见，因为CSS modules在Next.js是可以开箱即用的。</p><p>下面是一个例子，在<code>Home.module.css</code>和<code>other.module.css</code>对<strong>同样的类名</strong>书写样式，也不会产生冲突。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@file</span> Home.module.css</span><br><span class="line">.page &#123;</span><br><span class="line"><span class="attribute">color</span>: bule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@file</span> other.module.css</span><br><span class="line">.page &#123;</span><br><span class="line"><span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只会生效这里import的样式</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;../styles/Home.module.css&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="comment">// 蓝色</span></span><br><span class="line">&lt;div className=&#123;styles.page&#125;&gt;</span><br><span class="line">&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优势：</li></ul><ol><li>当需要复用样式的时候，不同的组件可以import同一份样式文件，减少很多重复样式代码，减轻打包体积～</li><li>说到样式复用，CSS modules还有个特殊的composes属性，能引入别的module的css样式，也能重写（override）。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">composes: className from <span class="string">&quot;./shared.css&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>缺点：</li></ul><ol><li>不够“程序化”<br>CSS modules在原生CSS的基础上增加了以modules（文件）划分的作用域，解决了作用域问题，但仍逃不过在单个module内以原生的方式书写CSS。原生的CSS只能纯纯的枚举出每一条样式，如果能在书写CSS的时候也支持一些程序特性岂不是更好？比如最常用的循环、遍历、函数、继承…</li></ol><h4 id="CSS-PREPROCESSOR-预处理器"><a href="#CSS-PREPROCESSOR-预处理器" class="headerlink" title="CSS PREPROCESSOR 预处理器"></a>CSS PREPROCESSOR 预处理器</h4><p>Sass、Less、Stylus… 这些预处理器就是为了解决CSS不够“程序化”而诞生的。他们允许你用一种不一样的语法来写CSS，之后再经过编译转化成原生CSS。</p><p>这里是一个例子：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 只需一键安装sass</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install sass</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 然后把原本的css后缀文件改成scss</span><br><span class="line">// 就可以直接使用sass的方式来编写css啦，比如变量名、循环、...</span><br><span class="line">@ file Home.module.scss</span><br><span class="line"></span><br><span class="line">$ <span class="attribute">primary-color</span>: red;</span><br><span class="line">$ <span class="attribute">font</span>-stack：Helvetica</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">font</span>: <span class="number">100%</span> $font-stack;</span><br><span class="line"><span class="attribute">color</span>: $primary-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优势：</li></ul><ol><li>可以用变量、继承、循环、函数、…等程序特性</li></ol><ul><li>缺点：</li></ul><ol><li>学习成本<br>每种预处理器都有各自特定的语法，虽然是用一种类CSS的语言来编写，但总有有些差异。这意味着开发人员必须配合工具掌握新的语法。</li><li>样式和项目代码微微割裂<br>在解决完作用域、程序化问题后，样式在前端项目中完完全全的独立出来了，似乎少了一些联动能力。既然我们有JSX这样整合JS和HTML的合体语言，为什么不能把CSS也合体进来呢？</li></ol><h4 id="CSS-IN-JS"><a href="#CSS-IN-JS" class="headerlink" title="CSS IN JS"></a>CSS IN JS</h4><p>这是一种把CSS写进JS的解决方案，就像把HTML写进JS后就有了JSX。这一类的库有styled components、emotion、jss、style tron、…</p><p>举个使用styled jsx的例子：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;../styles/Home.module.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> [color, serColor] = <span class="title function_">useState</span>(<span class="string">&#x27;orange&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div className=&#123;styles.page&#125;&gt;</span><br><span class="line">&lt;style jsx&gt;&#123;`</span><br><span class="line">h1 &#123;</span><br><span class="line">// 取的是组件state，可以随state变化！</span><br><span class="line">color: $&#123;color&#125;;</span><br><span class="line">&#125;</span><br><span class="line">`&#125;&lt;/style&gt;</span><br><span class="line">&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优势：</li></ul><ol><li>轻松能实现的程序化能力<br>在sass里的程序化能力，CSS in JS都能做到，甚至更强，这种方式可以直接使用JS书写这种程序化语言，也不需要额外学习成本。</li><li>创建动态样式<br>在sass里，程序代码或许和样式文件是完全独立开来的。而使用CSS in JS，样式和JS强绑定，我们的样式能够跟着代码、跟着组件的state等特性实现动态样式，特别灵活！</li><li>不会有作用域问题<br>类似module，CSS in JS的样式只会绑定在样式定义的组件内，不会污染全局样式～</li></ol><ul><li>缺点：</li></ul><ol><li>CSS和JS混写，代码管理困难。</li></ol><h4 id="UTILITY-CLASSES-原子类"><a href="#UTILITY-CLASSES-原子类" class="headerlink" title="UTILITY CLASSES 原子类"></a>UTILITY CLASSES 原子类</h4><p>时下最火的新概念就是tailwindcss、windi css这些原子类CSS库，能够提供大量的原子类样式，帮助我们快速构建样式。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置好tailwind之后</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="comment">// 在这里写上tailwind的原子类classname，而不需要写样式</span></span><br><span class="line">&lt;div className=&quot;text-5xl font-bold&quot;&gt;</span><br><span class="line">&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缺点</li></ul><ol><li>需要比较麻烦的额外配置</li><li>打包后，生成的HTML文件可读性非常非常低<br><img src="/img/%E6%A0%B7%E5%BC%8F%E5%86%B2%E7%AA%81%E5%A4%AA%E5%A4%9A%EF%BC%8C%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%89%8D%E7%AB%AFCSS%E5%8D%87%E7%BA%A7/1.image" alt="image.png"></li><li>没有任何的内置组件</li></ol><ul><li>优势</li></ul><ol><li>打包时，能自动优化，去除没有使用的css样式，减轻打包产物体积。</li></ol><h4 id="CSS-FRAMEWORK"><a href="#CSS-FRAMEWORK" class="headerlink" title="CSS FRAMEWORK"></a>CSS FRAMEWORK</h4><p>bootstrap、bulma、这一类库既能提供特定的样式主题，又有内置的组件，比如bottom、cards、…等等。我个人在自己倒腾东西的时候非常喜欢用这一类框架，因为实在是太方便啦！这种方式在生产上几乎很少采用，因为开发人员往往需要根据产品原型来绘制前端界面，而不是这些框架固定的样式。另外采用这种方式，也容易对线上性能造成比较大影响。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 想使用这一类框架，只用一键安装上</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install bootstrap</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入框架的样式文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="comment">// 想要使用的样式都在bootstrap中用各种classname封装好啦，直接调用boostrap的预留classname，搞定</span></span><br><span class="line">&lt;div className=&quot;alert alert-primary&quot;&gt;</span><br><span class="line">&lt;h1&gt; Home Page &lt;/h1&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缺点：</li></ul><ol><li>在只使用bootstrap来搭建组件和修改样式的话，会不太方便<br>由于这类框架已经自带了许多预留组件，而bootstrap的样式又是用classname来获取的。假设我需要频繁使用<code>&lt;Bottom /&gt;</code>组件，却又不想在每次使用的时候，都重复的写相同的classname，那么就会将他们封装成<code>&lt;CustomButtom /&gt;</code>。这么做的话，项目代码中就可能会有大量的仅仅是为了封装classname而存在的组件。</li><li>打包文件过大<br>整个bootstrap文件是直接import进来的。因此在打包时，会把大量没使用到的classname也打包进来，会造成打包产物较大～</li></ol><h4 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h4><p>这是大家最熟悉的方式啦，ant design、material design、t design、rebase、….</p><h3 id="最终落地的升级方案"><a href="#最终落地的升级方案" class="headerlink" title="最终落地的升级方案"></a>最终落地的升级方案</h3><p>不同的CSS处理方式各有优劣，在实际开发中，可以自行选择和搭配合适的CSS处理手段。</p><p>在我目前工作中，是将项目的原生CSS，升级成css module + less 的组合，这样既能解决当前项目的核心矛盾：作用域和样式污染问题，又能让CSS的编写过程变得更“程序”，比如使用变量、继承等特性。</p><p>没有使用css in js 是因为当前项目没有主题切换和动态样式这样场景，此外css in js 会让一个组件文件变得非常冗长，尤其是目前我的工作特别多复杂图表的封装，仅jsx部分代码行数已经非常长，再引入CSS代码容易变得更混乱。我个人也更加偏向能用独立文件区分出CSS代码的方式，这样展示出更好的项目分层。</p><p>没有使用原子类的理由就更简单了，配置麻烦，可读性低，而且对团队内每个人都有较高的学习成本，不方便团队管理，直接pass了。</p><p>在前端工程开发的过程中，面对多人协作的场景，建立标准和团队内的规范是非常重要的一个环节。尤其当前业界的前端，就是没有通用标准的情况下，影响项目工程稳健性的往往是缺乏规范和标准，而不是开发人员的水平。在我工作的项目中，最初就是因为大量人员流动，大家在项目中各按各自的方式写CSS，导致在一个项目中存在3种以上CSS写法，非常难维护，也出现了样式互相污染、互相冲突的情况，所以才有了这次对CSS的调研，以及对项目进行升级和改造的工作。</p><p>附上一些参考资料：</p><p>Class naming 101: BEM: <a href="https://webflow.com/blog/class-naming-101-bem">https://webflow.com/blog/class-naming-101-bem</a><br>7 ways to deal with CSS: <a href="https://www.youtube.com/watch?v=ouncVBiye_M">https://www.youtube.com/watch?v=ouncVBiye_M</a><br>Should You Use Tailwind CSS?: <a href="https://www.youtube.com/watch?v=hdGsFpZ0J2E">https://www.youtube.com/watch?v=hdGsFpZ0J2E</a><br>next.js: <a href="https://www.nextjs.cn/">https://www.nextjs.cn/</a><br>tailwindcss: <a href="https://www.tailwindcss.cn/">https://www.tailwindcss.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> tech blog </category>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
